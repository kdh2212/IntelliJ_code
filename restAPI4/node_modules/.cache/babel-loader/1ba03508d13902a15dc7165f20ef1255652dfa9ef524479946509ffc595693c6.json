{"ast":null,"code":"import _toConsumableArray from \"C:/_dev3/restAPI4/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/_dev3/restAPI4/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { createVNode as _createVNode } from \"vue\";\n// Components\nimport { VExpansionPanelSymbol } from \"./shared.mjs\";\nimport { makeVExpansionPanelTextProps, VExpansionPanelText } from \"./VExpansionPanelText.mjs\";\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from \"./VExpansionPanelTitle.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\"; // Composables\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\nimport { computed, provide } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport var makeVExpansionPanelProps = propsFactory(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n  title: String,\n  text: String,\n  bgColor: String\n}, makeElevationProps()), makeGroupItemProps()), makeRoundedProps()), makeTagProps()), makeVExpansionPanelTitleProps()), makeVExpansionPanelTextProps()), 'VExpansionPanel');\nexport var VExpansionPanel = genericComponent()({\n  name: 'VExpansionPanel',\n  props: makeVExpansionPanelProps(),\n  emits: {\n    'group:selected': function groupSelected(val) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var groupItem = useGroupItem(props, VExpansionPanelSymbol);\n    var _useBackgroundColor = useBackgroundColor(props, 'bgColor'),\n      backgroundColorClasses = _useBackgroundColor.backgroundColorClasses,\n      backgroundColorStyles = _useBackgroundColor.backgroundColorStyles;\n    var _useElevation = useElevation(props),\n      elevationClasses = _useElevation.elevationClasses;\n    var _useRounded = useRounded(props),\n      roundedClasses = _useRounded.roundedClasses;\n    var isDisabled = computed(function () {\n      return (groupItem === null || groupItem === void 0 ? void 0 : groupItem.disabled.value) || props.disabled;\n    });\n    var selectedIndices = computed(function () {\n      return groupItem.group.items.value.reduce(function (arr, item, index) {\n        if (groupItem.group.selected.value.includes(item.id)) arr.push(index);\n        return arr;\n      }, []);\n    });\n    var isBeforeSelected = computed(function () {\n      var index = groupItem.group.items.value.findIndex(function (item) {\n        return item.id === groupItem.id;\n      });\n      return !groupItem.isSelected.value && selectedIndices.value.some(function (selectedIndex) {\n        return selectedIndex - index === 1;\n      });\n    });\n    var isAfterSelected = computed(function () {\n      var index = groupItem.group.items.value.findIndex(function (item) {\n        return item.id === groupItem.id;\n      });\n      return !groupItem.isSelected.value && selectedIndices.value.some(function (selectedIndex) {\n        return selectedIndex - index === -1;\n      });\n    });\n    provide(VExpansionPanelSymbol, groupItem);\n    useRender(function () {\n      var hasText = !!(slots.text || props.text);\n      var hasTitle = !!(slots.title || props.title);\n      var expansionPanelTitleProps = VExpansionPanelTitle.filterProps(props);\n      var expansionPanelTextProps = VExpansionPanelText.filterProps(props);\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panel', {\n          'v-expansion-panel--active': groupItem.isSelected.value,\n          'v-expansion-panel--before-active': isBeforeSelected.value,\n          'v-expansion-panel--after-active': isAfterSelected.value,\n          'v-expansion-panel--disabled': isDisabled.value\n        }, roundedClasses.value, backgroundColorClasses.value, props[\"class\"]],\n        \"style\": [backgroundColorStyles.value, props.style]\n      }, {\n        \"default\": function _default() {\n          return [_createVNode(\"div\", {\n            \"class\": ['v-expansion-panel__shadow'].concat(_toConsumableArray(elevationClasses.value))\n          }, null), _createVNode(VDefaultsProvider, {\n            \"defaults\": {\n              VExpansionPanelTitle: _objectSpread({}, expansionPanelTitleProps),\n              VExpansionPanelText: _objectSpread({}, expansionPanelTextProps)\n            }\n          }, {\n            \"default\": function _default() {\n              var _slots$default;\n              return [hasTitle && _createVNode(VExpansionPanelTitle, {\n                \"key\": \"title\"\n              }, {\n                \"default\": function _default() {\n                  return [slots.title ? slots.title() : props.title];\n                }\n              }), hasText && _createVNode(VExpansionPanelText, {\n                \"key\": \"text\"\n              }, {\n                \"default\": function _default() {\n                  return [slots.text ? slots.text() : props.text];\n                }\n              }), (_slots$default = slots[\"default\"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)];\n            }\n          })];\n        }\n      });\n    });\n    return {\n      groupItem: groupItem\n    };\n  }\n});","map":{"version":3,"names":["VExpansionPanelSymbol","makeVExpansionPanelTextProps","VExpansionPanelText","makeVExpansionPanelTitleProps","VExpansionPanelTitle","VDefaultsProvider","useBackgroundColor","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","makeTagProps","computed","provide","genericComponent","propsFactory","useRender","makeVExpansionPanelProps","_objectSpread","title","String","text","bgColor","VExpansionPanel","name","props","emits","groupSelected","val","setup","_ref","slots","groupItem","_useBackgroundColor","backgroundColorClasses","backgroundColorStyles","_useElevation","elevationClasses","_useRounded","roundedClasses","isDisabled","disabled","value","selectedIndices","group","items","reduce","arr","item","index","selected","includes","id","push","isBeforeSelected","findIndex","isSelected","some","selectedIndex","isAfterSelected","hasText","hasTitle","expansionPanelTitleProps","filterProps","expansionPanelTextProps","_createVNode","tag","style","default","concat","_toConsumableArray","_slots$default","call"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './shared'\nimport { makeVExpansionPanelTextProps, VExpansionPanelText } from './VExpansionPanelText'\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelProps = propsFactory({\n  title: String,\n  text: String,\n  bgColor: String,\n\n  ...makeElevationProps(),\n  ...makeGroupItemProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeVExpansionPanelTitleProps(),\n  ...makeVExpansionPanelTextProps(),\n}, 'VExpansionPanel')\n\nexport type VExpansionPanelSlots = {\n  default: never\n  title: never\n  text: never\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: makeVExpansionPanelProps(),\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      const expansionPanelTitleProps = VExpansionPanelTitle.filterProps(props)\n      const expansionPanelTextProps = VExpansionPanelText.filterProps(props)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          <VDefaultsProvider\n            defaults={{\n              VExpansionPanelTitle: {\n                ...expansionPanelTitleProps,\n              },\n              VExpansionPanelText: {\n                ...expansionPanelTextProps,\n              },\n            }}\n          >\n            { hasTitle && (\n              <VExpansionPanelTitle key=\"title\">\n                { slots.title ? slots.title() : props.title }\n              </VExpansionPanelTitle>\n            )}\n\n            { hasText && (\n              <VExpansionPanelText key=\"text\">\n                { slots.text ? slots.text() : props.text }\n              </VExpansionPanelText>\n            )}\n\n            { slots.default?.() }\n          </VDefaultsProvider>\n        </props.tag>\n      )\n    })\n\n    return {\n      groupItem,\n    }\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}